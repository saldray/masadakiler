Tanımlara hakim olalım

Git       : Free and open source version control system.
          What is the version control?
The management of changes to documents, computer programs,
large web sites ahd other collections of information

Directory : Folder  (Dizin : Klasör)
Terminal or Command Line   : Interface for Text Commands
(metin komutları için arayüz)

Terminal         : Uçbirim, Komut satırı, Konsol

CLI    : Command line interface (Komut satırı arayüzü)

cd     : Change Directory

Code Editor     : Word Processor for writing code

Repository      : Project or the folder/place where you project is kept (Depo)

Github          : A website to host your repositories online
                (ana makinemizdeki depolarımızı çevirim içi barındıran bir websitesi)

host            :ana makine, ev sahipliği yapmak, barındırmak

clone           : Bring a repository that is hosted somewhere like Github into a folder on your local machine

add             :Track your files and changes in Git

commit          :Save your files in git
(Dosyalarımızı git'e (içine) kaydetmeye yarıyor)
(işlemek, kaydı güncellemek, teslim etmek)
(commit ile (local repo) yerel repo'ya kayıt yapılmış olur.)

push      :Upload Git sommits to a remote repo, like Github
(push ile uzak depo'ya (remote repo(github)) kayıt yapılmış olur.)

Pull      :Download Changes from remote repo to your local machine(host)

Protocal  : Teşrifat
          :* Uyulması gereken kurallar kümesi.
          :** Bilgisayar bilimleri açısından protocoller (teşrifatlar)
          genelde iki veya daha fazla taraf için yapılması
          gereken bir dizi işi belirtir.



user.name ve user.email (bakalım)

git config user.name    kullanıcı adımıza bakalım.
git config user.email   kullanıcı elektronik posta adresimize bakalım.

git config --list       Daha önce yapılmış bir atama varsa ekranda listelenir.
git config --global user.name 'kullanıcı_adı'   ad atanır
git config --global user.email 'eposta_adı'     e-posta atanır
git config --list

##########
Şimdi çalışma dizinimizde bir git oluşturalım.

git init      git ilk olarak başlatılıyor, yükleniyor.
git status    Durum bilgisi alınır.
git add .     bulunulan dizindeki değişiklikler geçiş bölgesine
              gönderilir. İndex bölgesine gönderildi.
git status    durum kontrol edilir.
git commit -m "bir ileti yazılır"       daha sonrada ne yaptınğımızı anımsamak için
-m            message
git status    Durum kontrolü


git add -A    git add .  Tüm değişiklikler staging area'ya gönderildi.

git push      En son remote repo'ya (github'a) gönderilir.


#############################
## github'dan clone yaptığımda git remote çalışır
$ git clone https:githup.com/username/....

git status      (durum hakkında bilgi alıyoruz)
git log         (verilen commitleri görürüz)
                (commit: to perform; to do : yapmak,(suç cinayet)
                işlemek, taahhüt etmek)

# masaüstünde localde(yerelde) indirdiğim dizinin içerisindeki bir
# dosyada değişiklik yapayım. Değişiklik yapıldıktan sonra

git status           (m modified yani değiştirilmiş olduğunu görüyorum)
                     Bunları staging area'ya almam gerekiyor

git add .            (staging area'ya(geçiş bölgeisine, indeks bölgesine)
                     alındı)

git commit (-a) -m "localde içerikler değişti"          (git add ile staging area'ya
                     aldığım kayıtları, git commit ile local area'ya işledim)
                     (Şu anda yerel depomda kayıtlanmış oldu)

#git checkout        (branch (dal) değiştirmek için kullanılır daha sonradan
                     bakılabilir şimdilik ihtiyacım yok. İleride bakılacak)

git log              (yaptığım değişiklikler hakkında bilgi alırım, attığım
                     commit'ler burada görülür.)

git remote           (Originde olduğumu görürüm)
git remote -v        (Originin nereden kaynaklandığını ve hangi parametreleri
                     kullanacağımızı gösterir
                     push yapacağım zaman nereye gideceğimi gösteriyor.)

git push origin main

###########################
=== create a new repository on the command line ===
git init             (git başlatılır, git kurulur.)
git add README.md   (README.md okubeni dosyası eklenir. .md markdown uzantılı)
git commit -m "first commit"   adettendir ilk commit (kayıt) "first commit" diye atılır.
git branch -M main   (git "master" branch (dalında) ında çalışır.
                      github "main" branch (dalında) ında çalışır.
                      git varsayılanı "master"
                      github varsayılanı "main"
                      local repo'muzda git ile kayıtladığımız dosyaları ve
                      değişiklikleri daha sonradan github'a, remote repo'ya
                      gönderdiğimizde sorun yaşamamak için git'i "master"dan
                      "main" branch'ına geçiriyoruz.)



https://www.youtube.com/watch?v=84KYa_eaqWg&list=PL7r5fuxs-gge09wQA9RWGGoOBuuW7KBT7&index=2
ilk  olarak komut satırından repository (depo) oluşturmak için yapmamız gereken

ve ilk push lamada yapılacak olan
****************
git push --set-upstream origin master
****************

…or create a new repository on the command line

echo "# my-project" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:saldray/my-project.git
git push -u origin main

…or push an existing repository from the command line

git remote add origin git@github.com:saldray/my-project.git
git branch -M main
git push -u origin main


***********************************
https://medium.com/@cihanloyan/git-branching-dallanma-nedir-9b3f50132da1
***********************************

yeni branch açma
git branch feature/1

Yeni bir dal oluşturuldu. Listelemek için

git branch               (yazıyorum)

Kendi açtığım branch geçmek için

git checkout feature/1

feature/1 adlı dalın içinde değişiklik yaptım 'touch style.css'
master'ın içinde bir değişiklik yok

git checkout master

master'ın içine giriyorum  ls ile bakınca sadece index.html var.

şimdi merge ile birleştirmem lazım

Hangi branch deki değişiklikleri master branch e eklemek istiyorsak
master branch in içinde olmalıyız

git merge --no-ff feature/1


feture/1 de bir dallanma yaptım bugfix/1 diye
burada bir düzeltme yapıp master ın içinde iken merger ile birleştirme yapacağım
varsayılan mesajın çıkmaması için merge in mesajını şöyle yapabilirim.

git merge --no-ff -m "Merge Message" bugfix/1



************************
git reset (commit silme) soft, mixed, hard eğitim #4
************************


mkdir git-reset

cd git-reset

-local repository haline getirmek için

git init

misal touch first-file.txt oluşturdum.
şu an çalışma alınımda ben bunu stage area ya atmak için

git add first-file.txt   ile stage-area ya gönderirim

git commit -m "commit mesajı"

yapılan bir commit'i geri almak için
Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

git commit -m "first commit"


git reset --soft <adres>  stage area geri alır

git reset --mixed <adres> workstation or working tree çalışma alanına geri alır.

git reset --hard <adres>  git init başlangıç alanından bile çıkar

*****************************
git revert commit geri alma
*****************************

   ---- working directory
   |
git add
   |
   |--- staging area ----|
                         |
                      git commit
                         |
        repositor    ----|




                          --mixed
          ______________________________
          |                            |
   ______ |
   |     |                             O
  _____  |                             |
  |    | |  ---------> O ----------->  O
  |    |_|                             |
  |____|                               O
  working           staged           commit
  directory         snapshot         history
                             |            |
                             |____________|
                                 --soft
|                                          |
|__________________________________________|
                                 --hard



********************************
      git stash
********************************

git stash -m "stash message"

git stash list

git stash pop

git stash pop {index}

git stash apply {index}

git stash drop {index}

git clear


Daha tam commit lemeye hazır hale gelmediyse
o branch de çalışırken başka bir işe geçmemiz gerektiğinde
iş daha commitlenme aşamasına gelmedi. commitlenecek durumda
değil Başka bir branca geçip düzeltmeler yapmam gerektiğinde
bulunduğum branch tam commitlenemeyecek durumda diğer branch da
bir şeyler yapacaksak bulunduğumuz brach i değişikliklerini
kaybetmemek için stashleme işlemi yapılır
o an ki çalışma ağacımızın çalışma halini depolama alanına
almış oluyoruz buna da stash lemek deniyor
stash Saklamak anlamına geliyor

şu anki kodumuzun o anki halini commitlemeden yine bir yerde
kaydetmemizi barındırmamızı sağlıyor

git stash pop
veriyi getirdikten sonra stash listesinden siliyor

git stash apply
apply ise geri getirdikten sonra stash listten bu stash i silmiyor


https://www.youtube.com/watch?v=qzUqdnIRmLc&list=PL7r5fuxs-gge09wQA9RWGGoOBuuW7KBT7&index=8
************************************
     git rebase
Merge vs Rebase
************************************

rebase :
yeniden temellendirmek












